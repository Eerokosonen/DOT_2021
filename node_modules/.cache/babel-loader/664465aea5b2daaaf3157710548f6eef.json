{"ast":null,"code":"var _jsxFileName = \"/Users/eerokosonen/Documents/Koulu /3.vsk/DOT/Project/projectapp/src/Formbox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './content.css'; // Datepicker module \n\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { registerLocale } from \"react-datepicker\"; // Module for date formatting\n\nimport moment from 'moment'; // Imput range module for the slide input\n\nimport InputRange from 'react-input-range';\nimport \"react-input-range/lib/css/index.css\"; // Form validation module\n\nimport { useForm } from \"react-hook-form\"; //finnish formatting for date and time\n\nimport fi from 'date-fns/locale/fi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nregisterLocale('fi', fi);\n/**\nNaming policy:\n\nEmail\npassword\nid\ntoSleep\nfromSleep\ntotalHours\nrange \ndesc\n \n*/\n\n/*\nSimple REST API with Node.js json-server to read and write a local JSON file.\njson-server startup:\njson-server --watch obs.json\n\nJSON file found at: http://localhost:3000/\n*/\n\nfunction Formbox() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset\n  } = useForm(); //Data collected on the form:\n\n  let [tosleep, setTosleep] = useState(new Date() - 1);\n  let formattedtosleep = moment(tosleep).format(\"DD.MM.YYYY HH:mm\");\n  let [fromsleep, setFromsleep] = useState(new Date());\n  let formattedfromsleep = moment(fromsleep).format(\"DD.MM.YYYY HH:mm\");\n  let [range, setRange] = useState(1);\n  let [desc, setDesc] = useState('');\n  let [Email, setEmail] = useState('eerokos'); // total sleeping hours  \n\n  var totalHours = moment.utc(moment(fromsleep, \"HH:mm:ss\").diff(moment(tosleep, \"HH:mm:ss\"))).format(\"HH:mm\");\n\n  const onSubmit = data => {\n    data.tosleep = formattedtosleep;\n    data.fromsleep = formattedfromsleep;\n    data.range = range;\n    data.desc = desc;\n    data.totalHours = totalHours;\n    console.log('submitted data = ' + JSON.stringify(data));\n    addObs(data);\n\n    async function addObs(data) {\n      await fetch('http://localhost:3000/' + Email, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(() => {\n        formreset();\n      }).catch(error => console.error(\"error: \" + error));\n    }\n  };\n\n  let formreset = () => {\n    reset({\n      tosleep: '',\n      fromsleep: '',\n      range: '',\n      desc: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"box\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"K\\xE4vin nukkumaan:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: tosleep,\n        onChange: e => setTosleep(e),\n        showTimeSelect: true,\n        timeFormat: \"HH:mm\",\n        dateFormat: \"Pp\",\n        locale: \"fi\",\n        timeIntervals: 15,\n        ref: register({\n          name: 'tosleep',\n          value: formattedtosleep\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Her\\xE4sin:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: fromsleep,\n        onChange: e => setFromsleep(e),\n        showTimeSelect: true,\n        timeFormat: \"HH:mm\",\n        dateFormat: \"Pp\",\n        locale: \"fi\",\n        timeIntervals: 15,\n        ref: register({\n          name: 'fromsleep',\n          value: formattedfromsleep\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Unen laatu:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputRange, {\n        value: range,\n        name: \"range\",\n        onChange: e => setRange(e),\n        maxValue: 5,\n        minValue: 1,\n        ref: register({\n          name: 'range',\n          value: range\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Sanallinen arvio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"desc\",\n        onChange: e => setDesc(e.target.value),\n        ref: register({\n          name: 'desc',\n          value: desc\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Tallenna\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Formbox, \"vfB6HnVgAeu7wPHnH3XKzoSpK3g=\", false, function () {\n  return [useForm];\n});\n\n_c = Formbox;\nexport default Formbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Formbox\");","map":{"version":3,"sources":["/Users/eerokosonen/Documents/Koulu /3.vsk/DOT/Project/projectapp/src/Formbox.js"],"names":["React","useState","DatePicker","registerLocale","moment","InputRange","useForm","fi","Formbox","register","handleSubmit","watch","errors","reset","tosleep","setTosleep","Date","formattedtosleep","format","fromsleep","setFromsleep","formattedfromsleep","range","setRange","desc","setDesc","Email","setEmail","totalHours","utc","diff","onSubmit","data","console","log","JSON","stringify","addObs","fetch","method","headers","body","then","formreset","catch","error","e","name","value","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './content.css';\n\n// Datepicker module \nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { registerLocale } from \"react-datepicker\";\n\n// Module for date formatting\nimport moment from 'moment';\n\n// Imput range module for the slide input\nimport InputRange from 'react-input-range';\nimport \"react-input-range/lib/css/index.css\";\n\n// Form validation module\nimport { useForm } from \"react-hook-form\";\n\n//finnish formatting for date and time\nimport fi from 'date-fns/locale/fi';\nregisterLocale('fi', fi);\n\n/**\nNaming policy:\n\nEmail\npassword\nid\ntoSleep\nfromSleep\ntotalHours\nrange \ndesc\n \n*/\n\n/*\nSimple REST API with Node.js json-server to read and write a local JSON file.\njson-server startup:\njson-server --watch obs.json\n\nJSON file found at: http://localhost:3000/\n*/\n\nfunction Formbox() {\n  const { register, handleSubmit, watch, errors, reset } = useForm();\n\n  //Data collected on the form:\n  let [tosleep, setTosleep] = useState(new Date() -1);\n  let formattedtosleep = moment(tosleep).format(\"DD.MM.YYYY HH:mm\");\n\n  let [fromsleep, setFromsleep] = useState(new Date());\n  let formattedfromsleep = moment(fromsleep).format(\"DD.MM.YYYY HH:mm\");\n  let [range, setRange] = useState(1);\n  let [desc, setDesc] = useState('');\n\n  let [Email, setEmail] = useState('eerokos');\n\n  // total sleeping hours  \n  var totalHours = moment.utc(moment(fromsleep, \"HH:mm:ss\").diff(moment(tosleep, \"HH:mm:ss\"))).format(\"HH:mm\")\n\n  const onSubmit = data => {\n    data.tosleep = formattedtosleep;\n    data.fromsleep = formattedfromsleep;\n    data.range = range;\n    data.desc = desc;\n    data.totalHours = totalHours;\n    console.log('submitted data = ' + JSON.stringify(data));\n\n\n    addObs(data);\n    async function addObs(data) {\n      await fetch('http://localhost:3000/' + Email, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      })\n        .then(() => { formreset();  })\n        .catch(error => console.error(\"error: \" + error))\n    }\n  }\n\n  let formreset = () => {\n    reset({ tosleep: '', fromsleep: '', range: '', desc: '' });\n  }\n\n  return (\n    <div className=\"box\">\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label>Kävin nukkumaan:</label>\n        <DatePicker\n          selected={tosleep}\n          onChange={e => setTosleep(e)}\n          showTimeSelect\n          timeFormat=\"HH:mm\"\n          dateFormat=\"Pp\"\n          locale=\"fi\"\n          timeIntervals={15}\n          ref={register({ name: 'tosleep', value: formattedtosleep })}\n        />\n\n        <label>Heräsin:</label>\n        <DatePicker\n          selected={fromsleep}\n          onChange={e => setFromsleep(e)}\n          showTimeSelect\n          timeFormat=\"HH:mm\"\n          dateFormat=\"Pp\"\n          locale=\"fi\"\n          timeIntervals={15}\n          ref={register({ name: 'fromsleep', value: formattedfromsleep })}\n        />\n        <br></br>\n        <label>Unen laatu:</label>\n        <InputRange\n          value={range}\n          name=\"range\"\n          onChange={e => setRange(e)}\n          maxValue={5}\n          minValue={1}\n          ref={register({ name: 'range', value: range })}\n        />\n\n        <label>Sanallinen arvio:</label><br></br>\n        <textarea\n          name=\"desc\"\n          onChange={(e) => setDesc(e.target.value)}\n          ref={register({ name: 'desc', value: desc })}\n        ></textarea>\n\n        <button type=\"submit\">Tallenna</button>\n\n      </form>\n\n\n    </div>\n  );\n}\n\nexport default Formbox;"]},"metadata":{},"sourceType":"module"}