{"ast":null,"code":"import html2canvas from 'html2canvas';\nimport { useState, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n/**\r\n * @deprecated Not compatible with React 17. Use the useRechartToPng hook instead.\r\n * Returns a PNG URL string\r\n * @param instance - The Rechart component to generate the PNG for\r\n * @param options - Html2Canvas formatting options\r\n */\n\n\nfunction getPngData(instance, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // eslint-disable-next-line react/no-find-dom-node\n    const element = ReactDOM.findDOMNode(instance);\n    const pngData = yield html2canvas(element, options).then(canvas => canvas.toDataURL('image/png', 1.0));\n    return pngData;\n  });\n}\n/**\r\n * Returns a PNG URL string\r\n * @param options - Html2Canvas formatting options\r\n */\n\n\nfunction useRechartToPng(options = {}) {\n  const [png, setPng] = useState('');\n  const ref = useCallback( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node => __awaiter(this, void 0, void 0, function* () {\n    if (node !== null && (node === null || node === void 0 ? void 0 : node.container)) {\n      const data = yield html2canvas(node.container, options).then(canvas => canvas.toDataURL('image/png', 1.0));\n      setPng(data);\n    }\n  }), [options]);\n  return [png, ref];\n}\n\nexport { getPngData, useRechartToPng };","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import html2canvas from 'html2canvas';\nimport { useState, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\n/**\r\n * @deprecated Not compatible with React 17. Use the useRechartToPng hook instead.\r\n * Returns a PNG URL string\r\n * @param instance - The Rechart component to generate the PNG for\r\n * @param options - Html2Canvas formatting options\r\n */\r\nfunction getPngData(instance, options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // eslint-disable-next-line react/no-find-dom-node\r\n        const element = ReactDOM.findDOMNode(instance);\r\n        const pngData = yield html2canvas(element, options).then((canvas) => canvas.toDataURL('image/png', 1.0));\r\n        return pngData;\r\n    });\r\n}\r\n/**\r\n * Returns a PNG URL string\r\n * @param options - Html2Canvas formatting options\r\n */\r\nfunction useRechartToPng(options = {}) {\r\n    const [png, setPng] = useState('');\r\n    const ref = useCallback(\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    (node) => __awaiter(this, void 0, void 0, function* () {\r\n        if (node !== null && (node === null || node === void 0 ? void 0 : node.container)) {\r\n            const data = yield html2canvas(node.container, options).then((canvas) => canvas.toDataURL('image/png', 1.0));\r\n            setPng(data);\r\n        }\r\n    }), [options]);\r\n    return [png, ref];\r\n}\n\nexport { getPngData, useRechartToPng };\n//# sourceMappingURL=index.esm.js.map\n"]},"metadata":{},"sourceType":"module"}