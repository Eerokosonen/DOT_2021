{"ast":null,"code":"var _jsxFileName = \"/Users/eerokosonen/Documents/Koulu /3.vsk/DOT/Project/projectapp/src/Formbox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './content.css';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { registerLocale } from \"react-datepicker\";\nimport moment from 'moment'; // Module for date formatting\n\nimport InputRange from 'react-input-range'; // Range module for the slide input\n\nimport \"react-input-range/lib/css/index.css\";\nimport { useForm } from \"react-hook-form\"; // Form validation module\n\nimport fi from 'date-fns/locale/fi'; //Finnish formatting for date and time\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nregisterLocale('fi', fi);\n/**\nNaming policy:\n\nEmail\npassword\nid\ntoSleep\nfromSleep\ntotalHours\nrange \ndesc\n \n*/\n\n/*\nSimple REST API with Node.js json-server to read and write a local JSON file.\njson-server startup:\njson-server --watch obs.json\n\n*/\n\nfunction Formbox({\n  setIsupdated,\n  modifiedId\n}) {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset\n  } = useForm();\n  useEffect(() => {\n    if (modifiedId !== undefined) modObs(modifiedId);\n  }, [modifiedId]); //Data collected on the form:\n\n  var yesterday = new Date(); // Initializing tosleep value to last night\n\n  yesterday.setDate(yesterday.getDate() - 1);\n  yesterday.setHours(20);\n  let [tosleep, setTosleep] = useState(yesterday);\n  let formattedtosleep = moment(tosleep).format(\"DD.MM.YYYY HH:mm\");\n  let today = new Date(); // Initializing fromsleep value to this morning\n\n  today.setHours(7);\n  let [fromsleep, setFromsleep] = useState(today);\n  let formattedfromsleep = moment(fromsleep).format(\"DD.MM.YYYY HH:mm\");\n  let [range, setRange] = useState(1);\n  let [desc, setDesc] = useState('');\n  let [Email, setEmail] = useState('eerokos'); // Calculating total sleeping hours  \n\n  var totalHours = moment.utc(moment(fromsleep, \"HH:mm:ss\").diff(moment(tosleep, \"HH:mm:ss\"))).format(\"HH:mm\"); // When save-button is pressed we format the data  and post it to the server\n\n  const onSubmit = data => {\n    data.tosleep = formattedtosleep;\n    data.fromsleep = formattedfromsleep;\n    data.range = range;\n    data.desc = desc;\n    data.totalHours = totalHours;\n    console.log('submitted data = ' + JSON.stringify(data));\n    addObs(data);\n\n    async function addObs(data) {\n      await fetch('http://localhost:3000/' + Email, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(() => {\n        formreset();\n        setIsupdated(true);\n      }).catch(error => console.error(\"error: \" + error));\n    }\n\n    setIsupdated(false);\n  };\n\n  async function modObs(id) {\n    console.log('modifying with ID ' + id); // TODO:     \n    // If id exists - push instead of post?\n\n    fetch('http://localhost:3000/' + Email + '/' + id).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      } else {\n        const error = new Error(res.error);\n        throw error;\n      }\n    }).then(data => {\n      // Set fetched data to the form\n      console.log(data); // TODO: \n      // Dates are in Moment.js formatted type in the JSON\n      // Dates should be formatted to js date() to be assigned in datepickers\n      //console.log(new Date(data.tosleep));\n\n      console.log(moment(data.tosleep).format(\"DD.MM.YYYY HH:mm\"));\n      setRange(data.range);\n      setDesc(data.desc);\n    }).catch(error => console.error('Error:', error));\n    /*await fetch('http://localhost:3000/' + Email, + '/' + id {\n      method: 'PUSH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(() => { formreset(); setIsupdated(true); })\n      .catch(error => console.error(\"error: \" + error))*/\n  }\n\n  let formreset = () => {\n    setTosleep(yesterday);\n    setFromsleep(today);\n    setRange(1);\n    setDesc(''); // Description textarea does not reset for some reason\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"box\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"K\\xE4vin nukkumaan:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: tosleep,\n        onChange: e => setTosleep(e),\n        showTimeSelect: true,\n        timeFormat: \"HH:mm\",\n        dateFormat: \"Pp\",\n        locale: \"fi\",\n        timeIntervals: 15,\n        ref: register({\n          name: 'tosleep',\n          value: formattedtosleep\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Her\\xE4sin:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: fromsleep,\n        onChange: e => setFromsleep(e),\n        showTimeSelect: true,\n        timeFormat: \"HH:mm\",\n        dateFormat: \"Pp\",\n        locale: \"fi\",\n        timeIntervals: 15,\n        ref: register({\n          name: 'fromsleep',\n          value: formattedfromsleep\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Unen laatu:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputRange, {\n        value: range,\n        name: \"range\",\n        onChange: e => setRange(e),\n        maxValue: 5,\n        minValue: 1,\n        ref: register({\n          name: 'range',\n          value: range\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Sanallinen arvio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Vapaa kuvaus nukutusta y\\xF6st\\xE4, ja sen vaikutuksista p\\xE4iv\\xE4n vireystilaan\",\n        onChange: e => setDesc(e.target.value),\n        ref: register({\n          name: 'desc',\n          value: desc\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Tallenna\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Formbox, \"ASz4kcLSNde/kjFoyvk6N0Itsqs=\", false, function () {\n  return [useForm];\n});\n\n_c = Formbox;\nexport default Formbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Formbox\");","map":{"version":3,"sources":["/Users/eerokosonen/Documents/Koulu /3.vsk/DOT/Project/projectapp/src/Formbox.js"],"names":["React","useState","useEffect","DatePicker","registerLocale","moment","InputRange","useForm","fi","Formbox","setIsupdated","modifiedId","register","handleSubmit","watch","errors","reset","undefined","modObs","yesterday","Date","setDate","getDate","setHours","tosleep","setTosleep","formattedtosleep","format","today","fromsleep","setFromsleep","formattedfromsleep","range","setRange","desc","setDesc","Email","setEmail","totalHours","utc","diff","onSubmit","data","console","log","JSON","stringify","addObs","fetch","method","headers","body","then","formreset","catch","error","id","res","status","json","Error","e","name","value","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './content.css';\n\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { registerLocale } from \"react-datepicker\";\n\nimport moment from 'moment'; // Module for date formatting\n\nimport InputRange from 'react-input-range'; // Range module for the slide input\nimport \"react-input-range/lib/css/index.css\";\n\nimport { useForm } from \"react-hook-form\"; // Form validation module\n\nimport fi from 'date-fns/locale/fi'; //Finnish formatting for date and time\n\nregisterLocale('fi', fi);\n\n/**\nNaming policy:\n\nEmail\npassword\nid\ntoSleep\nfromSleep\ntotalHours\nrange \ndesc\n \n*/\n\n/*\nSimple REST API with Node.js json-server to read and write a local JSON file.\njson-server startup:\njson-server --watch obs.json\n\n*/\n\nfunction Formbox({ setIsupdated, modifiedId }) {\n  const { register, handleSubmit, watch, errors, reset } = useForm();\n\n  useEffect(() => {\n    if (modifiedId !== undefined)\n      modObs(modifiedId);\n  }, [modifiedId]);\n\n  //Data collected on the form:\n\n  var yesterday = new Date();  // Initializing tosleep value to last night\n  yesterday.setDate(yesterday.getDate() - 1);\n  yesterday.setHours(20);\n\n  let [tosleep, setTosleep] = useState(yesterday);\n  let formattedtosleep = moment(tosleep).format(\"DD.MM.YYYY HH:mm\");\n\n  let today = new Date(); // Initializing fromsleep value to this morning\n  today.setHours(7);\n  let [fromsleep, setFromsleep] = useState(today);\n  let formattedfromsleep = moment(fromsleep).format(\"DD.MM.YYYY HH:mm\");\n\n  let [range, setRange] = useState(1);\n  let [desc, setDesc] = useState('');\n\n  let [Email, setEmail] = useState('eerokos');\n\n  // Calculating total sleeping hours  \n  var totalHours = moment.utc(moment(fromsleep, \"HH:mm:ss\").diff(moment(tosleep, \"HH:mm:ss\"))).format(\"HH:mm\")\n\n  // When save-button is pressed we format the data  and post it to the server\n  const onSubmit = data => {\n    data.tosleep = formattedtosleep;\n    data.fromsleep = formattedfromsleep;\n    data.range = range;\n    data.desc = desc;\n    data.totalHours = totalHours;\n    console.log('submitted data = ' + JSON.stringify(data));\n\n    addObs(data);\n    async function addObs(data) {\n      await fetch('http://localhost:3000/' + Email, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      })\n        .then(() => { formreset(); setIsupdated(true); })\n        .catch(error => console.error(\"error: \" + error))\n    }\n\n    setIsupdated(false);\n  }\n\n  async function modObs(id) {\n    console.log('modifying with ID ' + id);\n\n    // TODO:     \n    // If id exists - push instead of post?\n\n    fetch('http://localhost:3000/' + Email + '/' + id)\n      .then(res => {\n        if (res.status === 200) {\n          return res.json();\n        } else {\n          const error = new Error(res.error);\n          throw error;\n        }\n      })\n      .then(data => { // Set fetched data to the form\n        console.log(data);\n        // TODO: \n        // Dates are in Moment.js formatted type in the JSON\n        // Dates should be formatted to js date() to be assigned in datepickers\n        //console.log(new Date(data.tosleep));\n        console.log(moment(data.tosleep).format(\"DD.MM.YYYY HH:mm\"));\n        setRange(data.range);\n        setDesc(data.desc);\n      }) \n      .catch(error => console.error('Error:', error))\n\n\n    /*await fetch('http://localhost:3000/' + Email, + '/' + id {\n      method: 'PUSH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(() => { formreset(); setIsupdated(true); })\n      .catch(error => console.error(\"error: \" + error))*/\n  }\n\n  let formreset = () => {\n    setTosleep(yesterday);\n    setFromsleep(today);\n    setRange(1);\n    setDesc(''); // Description textarea does not reset for some reason\n  }\n\n  return (\n    <div className=\"box\">\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label>Kävin nukkumaan:</label>\n        <DatePicker\n          selected={tosleep}\n          onChange={e => setTosleep(e)}\n          showTimeSelect\n          timeFormat=\"HH:mm\"\n          dateFormat=\"Pp\"\n          locale=\"fi\"\n          timeIntervals={15}\n          ref={register({ name: 'tosleep', value: formattedtosleep })}\n        />\n\n        <br></br><label>Heräsin:</label>\n        <DatePicker\n          selected={fromsleep}\n          onChange={e => setFromsleep(e)}\n          showTimeSelect\n          timeFormat=\"HH:mm\"\n          dateFormat=\"Pp\"\n          locale=\"fi\"\n          timeIntervals={15}\n          ref={register({ name: 'fromsleep', value: formattedfromsleep })}\n        />\n        <br></br>\n        <label>Unen laatu:</label>\n        <InputRange\n          value={range}\n          name=\"range\"\n          onChange={e => setRange(e)}\n          maxValue={5}\n          minValue={1}\n          ref={register({ name: 'range', value: range })}\n        />\n\n        <label>Sanallinen arvio:</label><br></br>\n        <textarea\n          placeholder='Vapaa kuvaus nukutusta yöstä, ja sen vaikutuksista päivän vireystilaan'\n          onChange={(e) => setDesc(e.target.value)}\n          ref={register({ name: 'desc', value: desc })}\n        ></textarea>\n\n        <button type=\"submit\">Tallenna</button>\n\n      </form>\n\n    </div>\n  );\n}\n\nexport default Formbox;"]},"metadata":{},"sourceType":"module"}