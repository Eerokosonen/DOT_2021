import html2canvas from 'html2canvas';
import { useState, useCallback } from 'react';
import ReactDOM from 'react-dom';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/**
 * @deprecated Not compatible with React 17. Use the useRechartToPng hook instead.
 * Returns a PNG URL string
 * @param instance - The Rechart component to generate the PNG for
 * @param options - Html2Canvas formatting options
 */
function getPngData(instance, options) {
    return __awaiter(this, void 0, void 0, function* () {
        // eslint-disable-next-line react/no-find-dom-node
        const element = ReactDOM.findDOMNode(instance);
        const pngData = yield html2canvas(element, options).then((canvas) => canvas.toDataURL('image/png', 1.0));
        return pngData;
    });
}
/**
 * Returns a PNG URL string
 * @param options - Html2Canvas formatting options
 */
function useRechartToPng(options = {}) {
    const [png, setPng] = useState('');
    const ref = useCallback(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (node) => __awaiter(this, void 0, void 0, function* () {
        if (node !== null && (node === null || node === void 0 ? void 0 : node.container)) {
            const data = yield html2canvas(node.container, options).then((canvas) => canvas.toDataURL('image/png', 1.0));
            setPng(data);
        }
    }), [options]);
    return [png, ref];
}

export { getPngData, useRechartToPng };
//# sourceMappingURL=index.esm.js.map
